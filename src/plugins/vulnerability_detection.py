from .core import register_plugin

# Placeholder for building a prompt
def _build_prompt(context):
    return f"Analyze this code: {context}"

# Placeholder for querying Gemini
def _query_gemini(prompt):
    return f"Gemini analysis for: {prompt}"

@register_plugin("gemini_ai", "1.2", dependencies=["requests"])
class GeminiAIAnalyzer:
    def __init__(self, config):
        self.api_key = config.get("GEMINI_API_KEY", "")
        self.model = config.get("model", "gemini-pro")
        
    def analyze(self, context):
        # Enhanced context-aware analysis
        prompt = _build_prompt(context)
        return _query_gemini(prompt)

if __name__ == '__main__':
    from .core import PLUGIN_REGISTRY
    print("Available plugins:", PLUGIN_REGISTRY.keys())
    config = {"GEMINI_API_KEY": "your-api-key"}
    analyzer = PLUGIN_REGISTRY["gemini_ai"]["class"](config)
    result = analyzer.analyze("print('hello world')")
    print(result)
